//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZavršniRad
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Stomatoloska_MLEntities1 : DbContext
    {
        public Stomatoloska_MLEntities1()
            : base("name=Stomatoloska_MLEntities1")
        {
            Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Dijagnoza> Dijagnozas { get; set; }
        public virtual DbSet<IzvrsenaUsluga> IzvrsenaUslugas { get; set; }
        public virtual DbSet<Korisnik> Korisniks { get; set; }
        public virtual DbSet<Lijek> Lijeks { get; set; }
        public virtual DbSet<Materijal> Materijals { get; set; }
        public virtual DbSet<Ocjena> Ocjenas { get; set; }
        public virtual DbSet<Osoblje> Osobljes { get; set; }
        public virtual DbSet<Pacijent> Pacijents { get; set; }
        public virtual DbSet<Poruka> Porukas { get; set; }
        public virtual DbSet<PotroseniMaterijal> PotroseniMaterijals { get; set; }
        public virtual DbSet<Pregled> Pregleds { get; set; }
        public virtual DbSet<Racun> Racuns { get; set; }
        public virtual DbSet<Stomatolog> Stomatologs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Terapija> Terapijas { get; set; }
        public virtual DbSet<Termin> Termins { get; set; }
        public virtual DbSet<Usluga> Uslugas { get; set; }
        public virtual DbSet<UspostavljenaDijagnoza> UspostavljenaDijagnozas { get; set; }
        public virtual DbSet<Zub> Zubs { get; set; }
    
        public virtual ObjectResult<usp_Usluge_All_Result> usp_Usluge_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Usluge_All_Result>("usp_Usluge_All");
        }
    
        public virtual ObjectResult<usp_Usluge_ByNaziv_Result> usp_Usluge_ByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Usluge_ByNaziv_Result>("usp_Usluge_ByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<usp_Zubi_Result> usp_Zubi(Nullable<int> pacijentId, Nullable<int> brojZuba)
        {
            var pacijentIdParameter = pacijentId.HasValue ?
                new ObjectParameter("PacijentId", pacijentId) :
                new ObjectParameter("PacijentId", typeof(int));
    
            var brojZubaParameter = brojZuba.HasValue ?
                new ObjectParameter("BrojZuba", brojZuba) :
                new ObjectParameter("BrojZuba", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Zubi_Result>("usp_Zubi", pacijentIdParameter, brojZubaParameter);
        }
    }
}
