//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZavršniRad_API
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Stomatoloska_MLEntities : DbContext
    {
        public Stomatoloska_MLEntities()
            : base("name=Stomatoloska_MLEntities")
        {
            Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Dijagnoza> Dijagnozas { get; set; }
        public virtual DbSet<IzvrsenaUsluga> IzvrsenaUslugas { get; set; }
        public virtual DbSet<Korisnik> Korisniks { get; set; }
        public virtual DbSet<Lijek> Lijeks { get; set; }
        public virtual DbSet<Materijal> Materijals { get; set; }
        public virtual DbSet<Ocjena> Ocjenas { get; set; }
        public virtual DbSet<Osoblje> Osobljes { get; set; }
        public virtual DbSet<Pacijent> Pacijents { get; set; }
        public virtual DbSet<Poruka> Porukas { get; set; }
        public virtual DbSet<PotroseniMaterijal> PotroseniMaterijals { get; set; }
        public virtual DbSet<Pregled> Pregleds { get; set; }
        public virtual DbSet<Racun> Racuns { get; set; }
        public virtual DbSet<Stomatolog> Stomatologs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Terapija> Terapijas { get; set; }
        public virtual DbSet<Termin> Termins { get; set; }
        public virtual DbSet<Usluga> Uslugas { get; set; }
        public virtual DbSet<UspostavljenaDijagnoza> UspostavljenaDijagnozas { get; set; }
        public virtual DbSet<Zub> Zubs { get; set; }
    
        public virtual ObjectResult<usp_Usluge_All_Result> usp_Usluge_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Usluge_All_Result>("usp_Usluge_All");
        }
    
        public virtual ObjectResult<usp_Usluge_ByNaziv_Result> usp_Usluge_ByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Usluge_ByNaziv_Result>("usp_Usluge_ByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<usp_Zubi_Result> usp_Zubi(Nullable<int> pacijentId, Nullable<int> brojZuba)
        {
            var pacijentIdParameter = pacijentId.HasValue ?
                new ObjectParameter("PacijentId", pacijentId) :
                new ObjectParameter("PacijentId", typeof(int));
    
            var brojZubaParameter = brojZuba.HasValue ?
                new ObjectParameter("BrojZuba", brojZuba) :
                new ObjectParameter("BrojZuba", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Zubi_Result>("usp_Zubi", pacijentIdParameter, brojZubaParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> esp_Korisnik_Insert(string ime, string prezime, string email, string mobitel, string adresa, string user, string lozinka)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobitelParameter = mobitel != null ?
                new ObjectParameter("Mobitel", mobitel) :
                new ObjectParameter("Mobitel", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var lozinkaParameter = lozinka != null ?
                new ObjectParameter("Lozinka", lozinka) :
                new ObjectParameter("Lozinka", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("esp_Korisnik_Insert", imeParameter, prezimeParameter, emailParameter, mobitelParameter, adresaParameter, userParameter, lozinkaParameter);
        }
    
        public virtual int esp_Pacijents_Insert(Nullable<int> id, string jMBG, Nullable<System.DateTime> added)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var jMBGParameter = jMBG != null ?
                new ObjectParameter("JMBG", jMBG) :
                new ObjectParameter("JMBG", typeof(string));
    
            var addedParameter = added.HasValue ?
                new ObjectParameter("Added", added) :
                new ObjectParameter("Added", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Pacijents_Insert", idParameter, jMBGParameter, addedParameter);
        }
    
        public virtual ObjectResult<usp_Neocjenjene_Result> usp_Neocjenjene(Nullable<int> uslugaId, Nullable<int> pacijentId)
        {
            var uslugaIdParameter = uslugaId.HasValue ?
                new ObjectParameter("UslugaId", uslugaId) :
                new ObjectParameter("UslugaId", typeof(int));
    
            var pacijentIdParameter = pacijentId.HasValue ?
                new ObjectParameter("PacijentId", pacijentId) :
                new ObjectParameter("PacijentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Neocjenjene_Result>("usp_Neocjenjene", uslugaIdParameter, pacijentIdParameter);
        }
    
        public virtual int usp_KorisniciPut(Nullable<int> korisnikID, string ime, string prezime, string email, string telefon, string korisnickoIme, string lozinka, string adresa)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaParameter = lozinka != null ?
                new ObjectParameter("Lozinka", lozinka) :
                new ObjectParameter("Lozinka", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_KorisniciPut", korisnikIDParameter, imeParameter, prezimeParameter, emailParameter, telefonParameter, korisnickoImeParameter, lozinkaParameter, adresaParameter);
        }
    
        public virtual ObjectResult<usp_Pacijent_ByIme_Result> usp_Pacijent_ByIme(string ime)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Pacijent_ByIme_Result>("usp_Pacijent_ByIme", imeParameter);
        }
    
        public virtual ObjectResult<usp_PacijentiAll_Result> usp_PacijentiAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PacijentiAll_Result>("usp_PacijentiAll");
        }
    
        public virtual ObjectResult<usp_SlikaPrikaz_Result> usp_SlikaPrikaz(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SlikaPrikaz_Result>("usp_SlikaPrikaz", idParameter);
        }
    
        public virtual ObjectResult<usp_TerminiPretraga_Result> usp_TerminiPretraga(Nullable<System.DateTime> datumOD, Nullable<System.DateTime> datumDO)
        {
            var datumODParameter = datumOD.HasValue ?
                new ObjectParameter("DatumOD", datumOD) :
                new ObjectParameter("DatumOD", typeof(System.DateTime));
    
            var datumDOParameter = datumDO.HasValue ?
                new ObjectParameter("DatumDO", datumDO) :
                new ObjectParameter("DatumDO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerminiPretraga_Result>("usp_TerminiPretraga", datumODParameter, datumDOParameter);
        }
    
        public virtual ObjectResult<usp_ZauzetiTermini_Result> usp_ZauzetiTermini()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ZauzetiTermini_Result>("usp_ZauzetiTermini");
        }
    
        public virtual ObjectResult<usp_DanasnjiTermini_Result> usp_DanasnjiTermini()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DanasnjiTermini_Result>("usp_DanasnjiTermini");
        }
    
        public virtual ObjectResult<usp_NaredniTermini_Result> usp_NaredniTermini()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NaredniTermini_Result>("usp_NaredniTermini");
        }
    
        public virtual ObjectResult<usp_ProsliTermini_Result> usp_ProsliTermini()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProsliTermini_Result>("usp_ProsliTermini");
        }
    
        public virtual ObjectResult<usp_TerminiPonedjeljak_Result> usp_TerminiPonedjeljak(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TerminiPonedjeljak_Result>("usp_TerminiPonedjeljak", dateParameter);
        }
    
        public virtual int esp_IzvUsluga_Insert(Nullable<decimal> cijena, Nullable<int> pregledId, Nullable<int> uslugaId, Nullable<int> zubId)
        {
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(decimal));
    
            var pregledIdParameter = pregledId.HasValue ?
                new ObjectParameter("PregledId", pregledId) :
                new ObjectParameter("PregledId", typeof(int));
    
            var uslugaIdParameter = uslugaId.HasValue ?
                new ObjectParameter("UslugaId", uslugaId) :
                new ObjectParameter("UslugaId", typeof(int));
    
            var zubIdParameter = zubId.HasValue ?
                new ObjectParameter("ZubId", zubId) :
                new ObjectParameter("ZubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_IzvUsluga_Insert", cijenaParameter, pregledIdParameter, uslugaIdParameter, zubIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> esp_Pregled_Insert(Nullable<System.DateTime> datum, Nullable<System.DateTime> vrijeme, Nullable<int> pacijentID, Nullable<int> stomatologID, Nullable<int> terminID, Nullable<bool> obavljen)
        {
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var vrijemeParameter = vrijeme.HasValue ?
                new ObjectParameter("Vrijeme", vrijeme) :
                new ObjectParameter("Vrijeme", typeof(System.DateTime));
    
            var pacijentIDParameter = pacijentID.HasValue ?
                new ObjectParameter("PacijentID", pacijentID) :
                new ObjectParameter("PacijentID", typeof(int));
    
            var stomatologIDParameter = stomatologID.HasValue ?
                new ObjectParameter("StomatologID", stomatologID) :
                new ObjectParameter("StomatologID", typeof(int));
    
            var terminIDParameter = terminID.HasValue ?
                new ObjectParameter("TerminID", terminID) :
                new ObjectParameter("TerminID", typeof(int));
    
            var obavljenParameter = obavljen.HasValue ?
                new ObjectParameter("Obavljen", obavljen) :
                new ObjectParameter("Obavljen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("esp_Pregled_Insert", datumParameter, vrijemeParameter, pacijentIDParameter, stomatologIDParameter, terminIDParameter, obavljenParameter);
        }
    
        public virtual int esp_Terapija_Insert(Nullable<int> vrsta, Nullable<int> kolicina, Nullable<int> pregledId, Nullable<int> lijekId)
        {
            var vrstaParameter = vrsta.HasValue ?
                new ObjectParameter("Vrsta", vrsta) :
                new ObjectParameter("Vrsta", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(int));
    
            var pregledIdParameter = pregledId.HasValue ?
                new ObjectParameter("PregledId", pregledId) :
                new ObjectParameter("PregledId", typeof(int));
    
            var lijekIdParameter = lijekId.HasValue ?
                new ObjectParameter("LijekId", lijekId) :
                new ObjectParameter("LijekId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Terapija_Insert", vrstaParameter, kolicinaParameter, pregledIdParameter, lijekIdParameter);
        }
    
        public virtual int esp_UspDijag_Insert(Nullable<int> intenzitet, string napomena, Nullable<int> pregledId, Nullable<int> dijagnozaId, Nullable<int> zubId)
        {
            var intenzitetParameter = intenzitet.HasValue ?
                new ObjectParameter("Intenzitet", intenzitet) :
                new ObjectParameter("Intenzitet", typeof(int));
    
            var napomenaParameter = napomena != null ?
                new ObjectParameter("Napomena", napomena) :
                new ObjectParameter("Napomena", typeof(string));
    
            var pregledIdParameter = pregledId.HasValue ?
                new ObjectParameter("PregledId", pregledId) :
                new ObjectParameter("PregledId", typeof(int));
    
            var dijagnozaIdParameter = dijagnozaId.HasValue ?
                new ObjectParameter("DijagnozaId", dijagnozaId) :
                new ObjectParameter("DijagnozaId", typeof(int));
    
            var zubIdParameter = zubId.HasValue ?
                new ObjectParameter("ZubId", zubId) :
                new ObjectParameter("ZubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_UspDijag_Insert", intenzitetParameter, napomenaParameter, pregledIdParameter, dijagnozaIdParameter, zubIdParameter);
        }
    
        public virtual ObjectResult<usp_Prijedlozi_Result> usp_Prijedlozi(Nullable<int> stomatologID)
        {
            var stomatologIDParameter = stomatologID.HasValue ?
                new ObjectParameter("stomatologID", stomatologID) :
                new ObjectParameter("stomatologID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Prijedlozi_Result>("usp_Prijedlozi", stomatologIDParameter);
        }
    
        public virtual int esp_Ocjena_Insert(Nullable<System.DateTime> datum, Nullable<int> ocjenaInt, Nullable<int> uslugaID, Nullable<int> pacijentId)
        {
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var ocjenaIntParameter = ocjenaInt.HasValue ?
                new ObjectParameter("OcjenaInt", ocjenaInt) :
                new ObjectParameter("OcjenaInt", typeof(int));
    
            var uslugaIDParameter = uslugaID.HasValue ?
                new ObjectParameter("UslugaID", uslugaID) :
                new ObjectParameter("UslugaID", typeof(int));
    
            var pacijentIdParameter = pacijentId.HasValue ?
                new ObjectParameter("PacijentId", pacijentId) :
                new ObjectParameter("PacijentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Ocjena_Insert", datumParameter, ocjenaIntParameter, uslugaIDParameter, pacijentIdParameter);
        }
    
        public virtual int esp_Prijedlog_Insert(Nullable<int> pacijentId, Nullable<int> stomatologId, string tekstPoruke, Nullable<System.DateTime> datum, Nullable<bool> procitana)
        {
            var pacijentIdParameter = pacijentId.HasValue ?
                new ObjectParameter("PacijentId", pacijentId) :
                new ObjectParameter("PacijentId", typeof(int));
    
            var stomatologIdParameter = stomatologId.HasValue ?
                new ObjectParameter("StomatologId", stomatologId) :
                new ObjectParameter("StomatologId", typeof(int));
    
            var tekstPorukeParameter = tekstPoruke != null ?
                new ObjectParameter("TekstPoruke", tekstPoruke) :
                new ObjectParameter("TekstPoruke", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var procitanaParameter = procitana.HasValue ?
                new ObjectParameter("Procitana", procitana) :
                new ObjectParameter("Procitana", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Prijedlog_Insert", pacijentIdParameter, stomatologIdParameter, tekstPorukeParameter, datumParameter, procitanaParameter);
        }
    }
}
